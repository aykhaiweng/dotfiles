#!/usr/bin/env bash

# Initialize the general functions
source $DOTFILES/source/00_general_functions.sh

# copy command
function copy_do() {
    e_success "[copy] Copying $1 -> $2"
    if [[ $test -ne 1 ]]; then
        cp -r "$1" "$2"
    fi
}
# link command
function link_do() {
    e_success "[link] Linking $1 -> $2"
    if [[ $test -ne 1 ]]; then
        # Check if the folder exists
        local target_dirname=$(dirname $2)
        if [[ ! -d $target_dirname ]]; then
            mkdir -p $target_dirname
        fi
        # Link the folders
        ln -fs "$1" "$2"
    fi
}
# init command
function init_do() {
    e_header "Sourcing $1"
    if [[ $test -ne 1 ]]; then
        source "$1"
    fi
}

# Copy, link, init, etc.
function do_stuff() {
    # Saving these as local variables for now
    local command=$1
    local target_folder=${2:-$HOME}
    local extra_find_args=$3

    e_header "Doing $command"

    # Replacing command with the dotfiles related path
    dotfiles_relative_path=$DOTFILES/$1

    # Check if the path relative to the dotfiles exists before attempting anything
    if [[ -d "$dotfiles_relative_path" ]]; then
        # Create a recursive file list of all the files
        local file_list=$(find $dotfiles_relative_path -type f $extra_find_args | sed 's/^\.\///g' | sort)
        # echo "Debugging filelist ($dotfiles_relative_path) ($extra_find_args)"
        # echo "${file_list}"

        for source_file in $file_list; do
            # Define the file_target without it's home or dotfiles prepend, this is needed for
            # functions that only require the relative path without the home prepend
            local file_target=$(echo $source_file | sed "s|^$dotfiles_relative_path||g")
            # Add the home prepend to the target
            local home_target=$target_folder$file_target
            # Check if the target file exists in $HOME directory
            if [[ (-f $home_target || -d $home_target) && ! -L $home_target ]]; then
                if [[ ! -d $backup_dir ]]; then
                    # If the backup directory does not exist yet, create one
                    mkdir -p "$backup_dir"
                    backup=1
                fi
                e_arrow "[$command] $home_target Already exists. Creating a backup at $backup_dir$target_file"
                mv "$home_target" "$backup_dir$target_file"
            fi
            echo "Debugging ${command_do} ${source_file} ${home_target}"
            "${command}_do" "$source_file" "$home_target"
        done
    fi
}

# If backups are needed, this is where they'll go.
backup_dir="$DOTFILES/backups/$(date "+%Y_%m_%d-%H_%M_%S")/"
backup=

if [ -z "$1" ]; then
    e_arrow "No argument supplied, running copy, init and link"
fi

# Execute functions for each directory
if [ -z "$1" ] || [ "$1" == "copy" ]; then
    do_stuff copy $HOME
fi
if [ -z "$1" ] || [ "$1" == "init" ]; then
    do_stuff init $HOME
fi
if [ -z "$1" ] || [ "$1" == "link" ]; then
    do_stuff link $HOME
fi

# Alert if backups were made.
if [[ "$backup" ]]; then
     e_header "Backups were moved to $HOME/${backup_dir#$HOME/}"
fi

